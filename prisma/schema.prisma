generator client {
  provider = "prisma-client-js"
}

datasource db {
  url          = env("DATABASE_URL")
  provider     = "mongodb"
  relationMode = "prisma"
}

// Profiles
model Profile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique

  imageUrl String
  name     String
  email    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  servers  Server[]
  members  Member[]
  channels Channel[]
}

// Servers
model Server {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String
  inviteCode String @unique

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members  Member[]
  channels Channel[]

  @@index([profileId])
}

// Members
enum MEMBER {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  role MEMBER @default(GUEST)

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages              Message[]
  conversationInitiated Conversation[]  @relation("MemberOne")
  conversationReceived  Conversation[]  @relation("MemberTwo")
  directMessages        DirectMessage[]

  @@index([profileId])
  @@index([serverId])
}

// Channels
enum CHANNEL {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type CHANNEL @default(TEXT)

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  @@index([profileId])
  @@index([serverId])
}

// Messages
model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content    String
  attachment String?
  deleted    Boolean @default(false)

  memberId String @db.ObjectId
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String  @db.ObjectId
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  memberOneId String @db.ObjectId
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String @db.ObjectId
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberOneId])
  @@index([memberTwoId])
}

model DirectMessage {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  attachment String?
  deleted    Boolean @default(false)

  memberId String @db.ObjectId
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
